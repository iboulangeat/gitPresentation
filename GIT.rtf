{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16040\viewh10860\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \
----- NEW PROJECT\
git init\
git add --all\
git commit --all\
(make new repo in the website)\
git remote add origin <address>.git\
git push -u origin master\
\
-- download project\
git clone <address>.git\
\
---- MAIN COMMANDS\
git status\
\
git add <file> (to add a new file)\
git commit <file> (for changes on existing file)\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 git commit -m "message" # commit all files already added
\f1\fs28 \

\f0\fs24 git commit -am "message" # add all files that are changed and already tracked, then commit them\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 git log # show commits and hashes
\f1\fs28 \
\
git pull (download master)\

\f0\fs24 ## si merge pb:\
git fetch --all # ou git fetch origin \
+ git commit + git pull\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \
git push (upload master)\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 git push origin <branch> # push all changes from local <branch> changes to the remote copy
\f1\fs28 \
\
\
----- BRANCHES\
git checkout \'a0-b <branchname> -- create and switch to a new LOCAL branch <branchname> 
\f0\fs24 on your local machine only\
git checkout -b <branch> origin/<branch> # create a new branch set up to track an (already existing) remote branch
\f1\fs28 \

\f0\fs24 git checkout <branch> # checkout an existing local branch\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 git push -u origin <branchname> -- push a branch that is local only onto the server, and associate the local branch with the server copy (only do this once per branch, the first time you push it -- afterwards, regular push and pull will work fine)\
git branch -d <branchname> -- delete local branch <branchname>\
git push origin --delete <branchname> -- delete remote branch <branchname>\
\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 git push -u origin <branch> # push a branch that is local only to the remote server (i.e., make a remote copy)\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \
TO COPY AND CHECKOUT A REMOTE BRANCH\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 git fetch # get all remote branches and changes that have been pushed from others and are not local yet\
git fetch --prune # remove local dangling branches (i.e., remote tracking branch has been deleted)
\f1\fs28 \
git checkout -b <branchname> origin/<branchname> # creates a new local branch that tracks the remote one, and checks it out\
\
TO PULL A BRANCH\
git pull origin <branchname>\

\f0\fs24 git pull origin <branch> # get all changes to <branch> from the remote and update your local copy\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \
TO MERGE\
git merge <branchname> (located in the place you want to merge in)\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 git merge <branch> # merge <branch> into the current branch by the easiest method\
git merge --no-ff <branch> # merge <branch> into current branch, preserving topology\
git rebase <branch> # alternative to merging if the target branch is local only (no copy on remote)\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 ---- OTHER
\f0\fs24 \
git rm --cached filename (untracked file without removing it)\
git checkout branch name filename (overwrite/add the file of the branch into the current branch)\
git checkout . #or git reset --hard HEAD # Remove all not commited changes\
\
\
}